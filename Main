/**
 * Class with methods that work on a one dimensional array
 * of integers.  
 * Stefan Alger
 */
public class IntArrayWorkerStart
{
  // the integer array
  private int[] numArray;
  
  /**
   * A constructor that takes the integer array
   * @param theArray the integer array to use
   */
  public IntArrayWorkerStart(int[] theArray)
  {
    numArray = theArray;
  }
  
  /**
   * @return the elements of the array as a string
   */
  public String toString()
  {
    String result = "";
    int num = 0;
    for (int i = 0; i < numArray.length - 1; i++)
    {
      num = numArray[i];
      result = result + String.valueOf(num) + ", ";
    }
    return result + numArray[numArray.length-1];
  }
  
  /** 
   * Method to find and return the smallest value in the array
   * @return the smallest value in the array
   */
  public int getSmallest()
  {
     int smallest = Integer.MAX_VALUE;
    for (int num = 0; num < numArray.length; num++)    
    {
      if (numArray[num] < smallest)
      {
        smallest = numArray[num];
      }
    }
    return smallest;
  }
  
  /** 
   * Method to find and return the largest value in the array
   * @return the largest value in the array
   */
  public int getLargest()
  {
  int largest = Integer.MIN_VALUE;
  for(int num2 = 0; num2<numArray.length; num2++){
    if(numArray[num2]>largest){
      largest = numArray[num2];
    }
  }
  return largest;
    }
  
  /** get average
    * @return the average of the items in the array
    * precondition: there is at least one item in the array
    */
  public double getAverage()
  {
    double sum = 0;
    for(int index = 0;index<numArray.length;index++){
      sum += numArray[index];
    }
    return sum/numArray.length;
  }
  
  /**
   * Method to return a new array with every other element
   * from the original array in it
   * @return a new array with every other element from the field
   * numArray in it.
   */
  public int[] getEveryOther()
  {
    int length = numArray.length;
    int everyOtherLength;
    int[] everyOther = new int[(numArray.length +1)/2];
    if(numArray.length%2==0){
    everyOtherLength=length/2;
    everyOther = new int[everyOtherLength];
    }
    else{
    everyOtherLength = (length+1)/2;
    everyOther = new int[everyOtherLength];
    }
    int indexOther=0;
    for(int i =0;i<numArray.length;i+=2){
      everyOther[indexOther]=numArray[i];
      indexOther++;
    }
    return everyOther;
  }
  /**
   * Method to reverse the array elments
   */
  public void reverse()
  {
     int[] reverse = new int[numArray.length];
     int counter=numArray.length-1;
     for(int in =0;in<numArray.length;in++){
       reverse[in]=numArray[counter];
       counter--;
     }
     for(int ind=0;ind<numArray.length;ind++){
      numArray[ind]=reverse[ind]; 
     }
   }
  
  /**
   * Method to set the number array
   * @param theArray the new array to use
   */
  public void setNumArray(int[] theArray)
  {
    numArray = theArray;
  }
  
  /**
   * Method to find the index of a value in the array
   * @return the index of the value in the array
   * or -1 if not found
   */
  public int getIndex(int value)
  {
    int indexOfGivenValue= -1;
    for(int m=0;m<numArray.length;m++){
      if(value == numArray[m]){
       indexOfGivenValue=m;
      }
     }
   return indexOfGivenValue;
  }
  
  
  /**
   * Method to use a binary search to find an element in an array
   * precondition - the array must be sorted
   * @return the index of the element or -1 if not found
   */
  //public int getIndexBinary(int value)
  //{
  //}
  
  public static void main(String[] args)
  {
    int[] t1 = {1, 2, 3, 4, 5};
    IntArrayWorkerStart arrayWorker = new IntArrayWorkerStart(t1);
    int value = arrayWorker.getSmallest();
    System.out.println("Expected 1 from getSmallest and got " + value); 
    value = arrayWorker.getLargest();
    System.out.println("Expected 5 from getLargest and got " + value);
    int [] t2 = {6, 4, 2, 3};
    arrayWorker.setNumArray(t2);
    value = arrayWorker.getSmallest();
    System.out.println("Expected 2 from getSmallest and got " + value);
    value = arrayWorker.getLargest();
    System.out.println("Expected 6 from getLargest and got " + value);
    double dValue = arrayWorker.getAverage();
    System.out.println("Expected 3.75 from getAverage and got " + dValue);
    int[] newArray = arrayWorker.getEveryOther();
    arrayWorker.setNumArray(newArray);
    System.out.println("Expected 6.2 from getEveryOther and got " + arrayWorker);
    arrayWorker.setNumArray(t1);
    newArray = arrayWorker.getEveryOther();
    arrayWorker.setNumArray(newArray);
    System.out.println("Expected 1, 3, 5 from getEveryOther and got " + arrayWorker);
    int[] t3 = {9,-3,5,7,-2};
    arrayWorker.setNumArray(t3);
    dValue = arrayWorker.getAverage();
    System.out.println("Expected 3.2 from getAverage and got " + dValue);
    int index = arrayWorker.getIndex(-2);
    System.out.println("expected 4 from getIndex got " + index);
    index = arrayWorker.getIndex(8);
    System.out.println("expected -1 from getIndex got " + index);
    int[] t4 = {1, 3, 5, 8, 10};
    arrayWorker.setNumArray(t4);
    /*index = arrayWorker.getIndexBinary(9);
    System.out.println("Expected -1 from getIndexBinary got " + index);
    index = arrayWorker.getIndexBinary(3);
    System.out.println("Expected 1 from getIndexBinary got " + index);
    index = arrayWorker.getIndexBinary(10);
    System.out.println("Expected 4 from getIndexBinary got " + index);
    index = arrayWorker.getIndexBinary(1);
    System.out.println("Expected 0 from getIndexBinary got " + index);
    */
    value = arrayWorker.getLargest();
    System.out.println("Expected 10 from getLargest and got " + value);
    arrayWorker.reverse();
    System.out.println("Expected 10, 8, 5, 3, 1 from reverse got " + arrayWorker);
    
   
    
  }
}
 
